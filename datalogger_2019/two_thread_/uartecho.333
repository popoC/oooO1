/*
 * Copyright (c) 2015-2019, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.c ========
 */
/* For usleep() */
#include <unistd.h>
#include <stdint.h>
#include <stddef.h>
#include <stdio.h>
//#include <string.h>
/* Driver Header files */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/UART.h>

/* Example/Board Header files */
#include "Board.h"

/* POSIX Header files */
#include <pthread.h>

/***** GLOBAL VARIABLES *****/
extern pthread_mutex_t hold;

UART_Handle uart;


#include <xdc/runtime/Types.h>
#include <xdc/runtime/Timestamp.h>



#define software_UART_tx_PIN Board_GPIO_LED2
#define software_UART_rx_PIN Board_GPIO_LED2

void baudrate_2400_delay();
void baudrate_half_delay();
void software_UART_write(unsigned char *buf,unsigned char len);
int  software_UART_read_char(unsigned char *buf);

/*
 *  ======== gpioButtonFxn0 ========
 *  Callback function for the GPIO interrupt on Board_GPIO_BUTTON0.
 */
void gpioButtonFxn0(uint_least8_t index)
{
    /* Clear the GPIO interrupt and toggle an LED */
    GPIO_toggle(Board_GPIO_LED0);
}

/*
 *  ======== gpioButtonFxn1 ========
 *  Callback function for the GPIO interrupt on Board_GPIO_BUTTON1.
 *  This may not be used for all boards.
 */
void gpioButtonFxn1(uint_least8_t index)
{
    /* Clear the GPIO interrupt and toggle an LED */
    GPIO_toggle(Board_GPIO_LED1);
}


/*
 *  ======== mainThread ========
 */
void *mainThread(void *arg0)
{
    char        input;
    const char  echoPrompt[] = "Echoing characters:\r\n";

    UART_Params uartParams;

    /* Call driver init functions */
    GPIO_init();
    UART_init();

    /* Configure the LED pin */
    GPIO_setConfig(Board_GPIO_LED0, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);

    /* Turn on user LED */
    GPIO_write(Board_GPIO_LED0, Board_GPIO_LED_ON);

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.readEcho = UART_ECHO_OFF;
    uartParams.baudRate = 115200;

    uart = UART_open(Board_UART0, &uartParams);

    if (uart == NULL) {
        /* UART_open() failed */
        while (1);
    }

    UART_write(uart, echoPrompt, sizeof(echoPrompt));

  //  float test_f = 0.5;
  //  char output_str[50];
    /* Loop forever echoing */
    while (1) {
        UART_read(uart, &input, 1);


        pthread_mutex_lock(&hold);
      //  snprintf(output_str,50,"test sprintf %.2f function \n",test_f);
      //  UART_write(uart, &output_str, 31);

        UART_write(uart, &input, 1);
    //    UART_write(uart, echoPrompt, sizeof(echoPrompt));
        pthread_mutex_unlock(&hold);
    }
}



/*
void SendOut(unsigned char *p,unsigned char Long){
        unsigned char i,Dat;
        while(Long--){
                i=8;                //1200 8.n 1        P d8 S
                UART_SEND_Pin=0;
                PR2=TtK;
                BPS_Delay();
                Dat=*p++;
                while(i--){
                        UART_SEND_Pin=(bit)(Dat & 0x01);
                        Dat>>=1;
                        BPS_Delay();
                }
                UART_SEND_Pin=1;
                BPS_Delay();
        }
}
*/
void software_UART_write(unsigned char *buf,unsigned char len){

    GPIO_setConfig(software_UART_tx_PIN, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_HIGH );
    unsigned char n_bit,data;  //-- 2400,8,n,1
    while(len--){
        n_bit = 8;
        GPIO_write(software_UART_tx_PIN, 0);
        baudrate_2400_delay();
        data = *buf++;

        while(n_bit--){
            GPIO_write(software_UART_tx_PIN, (data&0x01) );
            data>>=1;
            baudrate_2400_delay();
        }
        GPIO_write(software_UART_tx_PIN, 1);
        baudrate_2400_delay();

    }
}

int software_UART_read(unsigned char *buf,unsigned char len){
    GPIO_setConfig(software_UART_rx_PIN, GPIO_CFG_IN_PU);

    UInt32 timeout_Ticks,timeout;
    timeout = 48000000; //- timeout = 1s
    timeout_Ticks = Timestamp_get32()+timeout;
    unsigned char n_bit,data;  //-- 2400,8,n,1
    int rec_n = 0;

    while(len--){
        while(GPIO_read(software_UART_rx_PIN)){
            if(Timestamp_get32() > timeout_Ticks){
                return(rec_n); //- timeout
            }
        }
        n_bit = 8;
        data = 0;

        while(n_bit--){
            baudrate_2400_delay();
            if(GPIO_read(software_UART_rx_PIN)){
                data = data| 0x80;
            }
            data>>=1;
       // baudrate_2400_delay();
        }
        *buf++ = (data) ;
        rec_n++;
        while(!GPIO_read(software_UART_rx_PIN));
        //timeout_Ticks = Timestamp_get32()+timeout;

        //baudrate_2400_delay();
    }

    return(rec_n);
}


int software_UART_read_char(unsigned char *buf){
    GPIO_setConfig(software_UART_rx_PIN, GPIO_CFG_IN_NOPULL);
    UInt32 timeout_Ticks,timeout;
    timeout = 48000000; //- timeout = 1s
    timeout_Ticks = Timestamp_get32()+timeout;
    unsigned char n_bit,data,data00;  //-- 2400,8,n,1

    while(GPIO_read(software_UART_rx_PIN)){
            if(Timestamp_get32() > timeout_Ticks){
                return(0); //- timeout
            }
    }

    baudrate_half_delay();
    baudrate_2400_delay();

    n_bit = 8;
    data = 0;
    data00 = 0;
    //while(n_bit--){
     for(n_bit = 0;n_bit<8;n_bit++){
            data>>=1;
            if(GPIO_read(software_UART_rx_PIN)){
                data = data| 0x80;
            }
            data00>>=1;
            baudrate_2400_delay();
    }
    *buf = (data) ;

    return(1);
}



void *softwareUART_Thread(void *arg0)
{
    uint32_t time = 1;

    /* Call driver init functions */
    GPIO_init();
    // I2C_init();    // SPI_init();    // UART_init();    // Watchdog_init();

    /* Configure the LED pin */
  //  GPIO_setConfig(Board_GPIO_LED2, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);

    /* Turn on user LED */
 //   GPIO_write(Board_GPIO_LED2, Board_GPIO_LED_ON);


    GPIO_setConfig(Board_GPIO_BUTTON0, GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING);
    GPIO_setConfig(Board_GPIO_BUTTON1, GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING);

    /* install Button callback */
    GPIO_setCallback(Board_GPIO_BUTTON0, gpioButtonFxn0);
    GPIO_setCallback(Board_GPIO_BUTTON1, gpioButtonFxn1);

    /* Enable interrupts */
    GPIO_enableInt(Board_GPIO_BUTTON0);
    GPIO_enableInt(Board_GPIO_BUTTON1);



 //  char output_msg[50];
 //  long int snn = 0;
 //  unsigned char input_msg[50];
   unsigned char input_char;
   while (1) {

       /*
        sleep(1);    // 1 second delay
         //   usleep(3000);  «Ü¤£·Ç
        pthread_mutex_lock(&hold);
        GPIO_toggle(Board_GPIO_LED0);
        //baudrate_2400_delay();
        snprintf(output_msg,50,"test software uart %ld function \n",snn);
       // software_UART_write(output_msg,strlen(output_msg));
        int rec_counter = software_UART_read(input_msg,5);
        if(rec_counter > 3){
            GPIO_toggle(Board_GPIO_LED1);
        }
        snn++;
        pthread_mutex_unlock(&hold);
        */
       input_char = 0;
      if(software_UART_read_char(&input_char) == 1){

          pthread_mutex_lock(&hold);
          UART_write(uart, &input_char, 1);
          pthread_mutex_unlock(&hold);
      }


    }
}

void baudrate_2400_delay(){
    GPIO_write(Board_GPIO_LED3, Board_GPIO_LED_ON);
    // -- https://e2e.ti.com/support/legacy_forums/embedded/tirtos/f/355/t/464329
    UInt32 sTicks, eTicks;
    sTicks = eTicks = Timestamp_get32();
    eTicks = eTicks + 19680;  //-- 410 * 48     //eTicks = eTicks + 4800;  //-- 100 * 48 --9600    //eTicks = eTicks + 190;  //-- 8 * 48 --115200
    //eTicks = eTicks + 19600;
    while(sTicks < eTicks)sTicks = Timestamp_get32();
    GPIO_write(Board_GPIO_LED3, Board_GPIO_LED_OFF);
}

void baudrate_half_delay(){
    UInt32 sTicks, eTicks;
    sTicks = eTicks = Timestamp_get32();
    eTicks = eTicks + 19680/2;  //48Mhz-- 1us
    while(sTicks < eTicks)sTicks = Timestamp_get32();
}

